// Bài 1

// Viết hàm đảo ngược chuỗi
// Example
// reverse('abc') // 'cba'
function reverse(str) {
  // viết code ở đây.
  var string = str.split("");
  var arrStr = string.reverse();
  return arrStr.join("");
}
// Bài 2

// Viết hàm để viết hoa chữ cái đầu của từng từ trong câu
// Example
// capitalize("abc") // "Abc"
function capitalize(str) {
	// viết code ở đây
	var strArr = str.split(" ");
	for(var i =0 ;i< strArr.length; i++){
	var charArr = strArr[i].split("");
	    charArr[0] = charArr[0].toUpperCase();
	strArr[i] = charArr.join("");
	}
	return strArr.join(" ");
}
    
// Bài 3

// Viết hàm lấy extension của một file
// Example
// getExtensionFilename("abc.mp3") // "mp3"

function getExtensionFilename(filename) {
  // viết code ở đây.
  var arrStr = filename.split(".");
  
  return arrStr[arrStr.length-1];
}


// Bài 4

// viết hàm lấy ra giá trị lớn nhất trong 3 số nhập vào
function findMax(a,b,c){
// viết code ở đây.
return (a>b)? (a>c)? a: c : (b>c)? b:c;
}


//Bài 5

function startWith(str){
  // viết code ở đây.
  return (str.indexOf("Java")) === 0;
}

// Bài 6

/*
  - Viết hàm findMaxDiff nhận tham số là một mảng integer (mảng số nguyên)
  - Trả về sự khác biệt lớn nhất giữa hai phần tử liền kề của mảng đó.
  - Nếu mảng có 1 phần tử hoặc không có phần tử nào trả về 0
  Example: 
  [1, -10, 5, 18, -9, 5] => 27
*/
function findMaxDiff(arr) {
  // viết code ở đây.
  if(arr.length < 2){
      return 0;
  }else{
      var maxDiff = 0;
      for(var i = 0; i < arr.length; i++){
        //   if(maxDiff < Math.abs(arr[i] - arr[i - 1])){
        //       maxDiff = Math.abs(arr[i] - arr[i - 1]);
        //   }else{
        //       return maxDiff;
        //   }
        maxDiff = (maxDiff < Math.abs(arr[i] - arr[i - 1]))? Math.abs(arr[i] - arr[i-1]):maxDiff;
      }
      
      return maxDiff;
  }
}

//Bài 7

//Viết 1 function kiểm tra số lương kí tự 'p' và 't' của 1 chuỗi có bằng nhau hay không
//=============================
//input : string
//output : true or false
//=============================

function equal_pt(str){ 
 // viết code ở đây.
if(str === ""){
    return true;
}else{
 var countP = 0;
 var countT = 0;
 for(var i =0; i<str.length;i++){
    if(str.charAt(i) == 'p')
        countP++;
    if(str.charAt(i) == 't')
        countT++;
 }
 return countP == countT;
 }
}

//Bài 8

// viết hàm first trả về giá trị đầu tiên của mảng, nếu n được truyền vào thì trả về 1 mảng chứa n giá trị đầu tiên của mảng (hoặc cả mảng nếu n lớn hơn số phần tử của mảng). Nếu n <= 0 thì trả về mảng trống.
// Tham số:
//	- array: mảng gốc
//	- n: số phần tử trả về
function first(array, n) {
  // viết code ở đây.
  if (n === undefined) {
    return [array[0]];
  } else if (n <= 0) {
    return [];
  } else if (n <= array.length) {
    return array.splice(0, n);
  } else
    return array;
}

//Bài 9



//Bài 10

// Viết hàm nhận vào 2 số a, b
// Trả về số gần 100 nhất
// nearestTo100(89, 180) // 89
function nearestTo100(a, b){
  // viết code ở đây.
  return (Math.abs(100-a) < Math.abs(100 - b))? a:b;
}

//Bài 11

/* Viết hàm checkInt để kiểm tra hai số nguyên được nhập vào. 
  Nếu có 1 số âm và một số dương thì trả về true. 
  Các trường hợp khác trả về false. 
  Số 0 là số không âm cũng không dương
  Tham số:
  - number1: số nguyên thứ nhất
  - number2: số nguyên thứ hai
*/

function checkInt(number1, number2) {
  // viết code ở đây.	
  if(number1 === 0 || number2 === 0){
      return undefined;
  }else if(number1 * number2 < 0){
      return true;
  }else{
      return false;
  }
}
